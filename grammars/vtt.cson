name: "WebVTT"
scopeName: "text.vtt"
fileTypes: ["vtt"]
patterns: [{
	# Root-level element
	name:  "meta.file-body.vtt"
	begin: "\\A\uFEFF?(WEBVTT)(?:[ \\t]([^\\r\\n]*))?$"
	end:   "(?=A)B"
	beginCaptures:
		1: name: "keyword.control.start-file.vtt"
		2: name: "comment.line.ignored.vtt"
	patterns: [{
		# Require a blank line immediately after “WEBVTT” signature
		begin: "\\G"
		end:   "^[ \\t]*$"
		patterns: [{
			# Flag anything on the second line as an error
			name: "invalid.illegal.unexpected-junk.vtt"
			match: "\\S+"
		}]
	}, include: "#main"]
}, include: "#main"]

repository:
	main:
		patterns: [
			{include: "#comment"}
			{include: "#region"}
			{include: "#style"}
			{include: "#cue"}
		]


	# Frivolous use of “-->” is frowned upon
	badArrow:
		name: "invalid.illegal.syntax.unexpected-separator.vtt"
		match: "\\S*?-->\\S*"


	# Comment block
	comment:
		name:  "comment.block.vtt"
		begin: "^NOTE(?=$|\\s)"
		end:   "^[ \\t]*$"
		beginCaptures:
			0: name: "storage.type.start-comment.vtt"


	# Cue block
	cue:
		name:  "meta.cue.block.vtt"
		begin: """(?x)
			(?=
				^
				(?:\\d{2,}:)?\\d{2}:\\d{2}\\.\\d{3}  # Start time
				[ \\t]+ --> [ \\t]+                  # Separator
				(?:\\d{2,}:)?\\d{2}:\\d{2}\\.\\d{3}  # End time
				(?:$|[ \\t])
			)
			|
			# Cue identifier
			^((?!.*?-->)[^\\r\\n]+)$
		"""
		end: "^[ \\t]*$"
		beginCaptures:
			1: name: "entity.name.cue.vtt"
		patterns: [
			{include: "#cueTimings"}
			{include: "#cuePayload"}
		]

	
	# Spans, HTML-ish syntax, and other interesting stuff
	cueComponents:
		patterns: [
			{include: "#cueClass"}
			{include: "#cueItalic"}
			{include: "#cueBold"}
			{include: "#cueUnderline"}
			{include: "#cueRuby"}
			{include: "#cueVoice"}
			{include: "#cueSpan"}
			{include: "#cueTimestamp"}
			{include: "text.html.basic#character-reference"}
		]

	# <tag.class annotation>…</tag>
	cueSpan:
		name:  "meta.cue-span.$2-tag.vtt"
		begin: "(<)([A-Za-z_:][-\\w:]*)(?=$|\\s|/?>|\\.)"
		end:   "(?=^[ \\t]*$)|((</)(\\2)\\s*(>))|(/>)"
		beginCaptures:
			0: name: "meta.tag.opening.vtt"
			1: name: "punctuation.definition.tag.begin.vtt"
			2: name: "entity.name.tag.localname.vtt"
		endCaptures:
			1: name: "meta.tag.closing.vtt"
			2: name: "punctuation.definition.tag.begin.vtt"
			3: name: "entity.name.tag.localname.vtt"
			4: name: "punctuation.definition.tag.end.vtt"
			5: name: "punctuation.definition.tag.end.self-closing.vtt"
		patterns: [include: "#cueSpanInnards", {
			name:  "meta.content.vtt"
			begin: "(?<=>)"
			end:   "(?=</[A-Za-z_:]|^[ \\t]*$)"
			patterns: [include: "#cueComponents"]
		}]


	# Remainder of opening cue-span tag
	cueSpanInnards:
		name:  "meta.tag.opening.vtt"
		begin: "\\G(?!\\s*/>)((?:\\.[^\\s&<>.]+)*\\.?)?"
		end:   ">|(?=\\s*/>|^[ \\t]*$)"
		beginCaptures:
			1: patterns: [include: "#cueSpanClasses"]
		endCaptures:
			0: name: "punctuation.definition.tag.end.vtt"
		patterns: [{
			# Annotation
			contentName: "string.unquoted.annotation.vtt"
			begin: "(?:[ \\t]+|^|\\G)(?=\\S)(?!>|&)"
			end:   "(?=$|>|&|^[ \\t]*$)"
			patterns: [include: "text.html.basic#character-reference"]
		}]


	# Classes list
	cueSpanClasses:
		name:  "entity.other.attribute-name.class.vtt"
		match: "(\\.)[^\\s&<>.]+"
		captures:
			1: name: "punctuation.definition.entity.class.vtt"


	# Caption/subtitle content
	cuePayload:
		name:  "meta.cue.payload.vtt"
		begin: "^(?=[ \\t]*\\S)"
		end:   "(?=^[ \\t]*$)(?!\\G)"
		patterns: [include: "#cueComponents"]


	# The “#timestamp” rule enclosed by angle brackets
	cueTimestamp:
		name:  "constant.other.cue-timestamp.vtt"
		match: "(<)((?:\\d{2,}:)?\\d{2}:\\d{2}\\.\\d{3})(>)"
		captures:
			1: name: "punctuation.definition.timestamp.begin.vtt"
			2: patterns: [include: "#timestamp"]
			3: name: "punctuation.definition.timestamp.end.vtt"


	# Time offsets: “HH:MM:SS.SSS --> HH:MM:SS.SSS”
	cueTimings:
		name: "meta.cue.timings.vtt"
		begin: """(?x) (?:^|\\G)
			((?:\\d{2,}:)?\\d{2}:\\d{2}\\.\\d{3}) # Start time
			[ \\t]+ (-->) [ \\t]+                 # Separator
			((?:\\d{2,}:)?\\d{2}:\\d{2}\\.\\d{3}) # End time
			(?=$|[ \\t])  [ \\t]*                 # Gap before “#cueSettings”
		"""
		end: "$"
		beginCaptures:
			1: name: "meta.start-time.vtt", patterns: [include: "#timestamp"]
			2: name: "keyword.operator.timespan.vtt"
			3: name: "meta.end-time.vtt", patterns: [include: "#timestamp"]
		patterns: [include: "#cueSettings"]


	# Optional cue settings following a pair of timestamps
	cueSettings:
		name:  "meta.cue.settings-list.vtt"
		begin: "(?<=[ \\t]|^)(?!$)"
		end:   "$"
		patterns: [
			{include: "#badArrow"}
			{include: "#setting"}
		]


	# Region definition block
	region:
		name:  "meta.region-definition.block.vtt"
		begin: "^(REGION)[ \\t]*$"
		end:   "^[ \\t]*$"
		beginCaptures:
			1: name: "storage.type.region.vtt"


	# Style block
	# - NOTE: Block cannot contain empty lines or the string “-->”. Such mistakes
	#   will be masked by the embedded CSS rules, which have higher precedence.
	style:
		name:  "meta.style.block.vtt"
		begin: "^(STYLE)[ \\t]*$"
		end:   "^[ \\t]*$"
		beginCaptures:
			1: name: "storage.type.style.vtt"
		contentName: "source.embedded.css"
		patterns: [include: "source.css"]


	# Setting names with possible values attached
	setting:
		patterns: [{
			# “name:optional-value”
			name: "meta.setting.with-value.vtt"
			match: "([^\\s:]+?)(:)(\\S*)"
			captures:
				1: name: "variable.assignment.setting-name.vtt"
				2: name: "keyword.operator.assignment.key-value.colon.vtt"
				3: name: "constant.other.setting-value.vtt"
		},{
			# “name-only”
			name: "meta.setting.without-value.vtt"
			match: "[^\\s:]+?(?=$|\\s)"
			captures:
				0: name: "variable.assignment.setting-name.vtt"
		}]


	# HH:MM:SS.SSS
	timestamp:
		name: "meta.timestamp.vtt"
		match: """(?x)
			(?:(\\d{2,})(:))?            # Hours        (≥ 00)
			(?:([0-5]\\d)|(\\d{2}))(:)   # Minutes      (00-59)
			(?:([0-5]\\d)|(\\d{2}))(\\.) # Seconds      (00-59)
			(\\d{3})                     # Milliseconds (000-999)
		"""
		captures:
			1: name: "constant.numeric.timestamp.unit.hour.vtt"
			2: patterns: [include: "#timestampColon"]
			3: name: "constant.numeric.timestamp.unit.minute.vtt"
			4: name: "invalid.illegal.value.out-of-range.vtt"
			5: patterns: [include: "#timestampColon"]
			6: name: "constant.numeric.timestamp.unit.second.vtt"
			7: name: "invalid.illegal.value.out-of-range.vtt"
			8: patterns: [include: "#timestampDecimal"]
			9: name: "constant.numeric.timestamp.unit.millisecond.vtt"


	# Colon separating numeric components of a timestamp
	timestampColon:
		name: "meta.separator.colon.vtt"
		match: ":"
		captures:
			0: name: "punctuation.separator.delimiter.vtt"

	# Decimal separator
	timestampDecimal:
		name: "meta.separator.decimal.fraction.radix-point.vtt"
		match: "\\."
		captures:
			0: name: "punctuation.separator.decimal.vtt"
