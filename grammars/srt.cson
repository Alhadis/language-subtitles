name: "SubRip Text"
scopeName: "text.srt"
fileTypes: ["srt"]
patterns: [include: "#main"]

repository:
	main:
		patterns: [include: "#subtitle"]


	# An action or sound enclosed by [square] or (round) brackets
	action:
		patterns: [{
			# [Square brackets]
			name:  "string.quoted.other.sound.action.square-brackets.srt"
			begin: "\\["
			end:   "\\]|(?=^[ \\t]*$)"
			beginCaptures: 0: name: "punctuation.definition.string.begin.srt"
			endCaptures:   0: name: "punctuation.definition.string.end.srt"
			patterns: [include: "#formatting"]
		},{
			# (Parentheses)
			name:  "string.quoted.other.sound.action.round-brackets.srt"
			begin: "\\("
			end:   "\\)|(?=^[ \\t]*$)"
			beginCaptures: 0: name: "punctuation.definition.string.begin.srt"
			endCaptures:   0: name: "punctuation.definition.string.end.srt"
			patterns: [include: "#formatting"]
		}]


	# SSA tags supported unofficially for subtitle placement: {\an…}
	align:
		name: "meta.tag.override.line-alignment.srt"
		match: "({)(\\\\a(?:n[1-9]|(10|11|(?!4|8)\\d)))(})"
		captures:
			1: name: "punctuation.definition.tag.begin.srt"
			2: name: "entity.name.tag.srt"
			3: name: "invalid.deprecated.syntax.tag.srt"
			4: name: "punctuation.definition.tag.end.srt"


	# Timecode separator, best viewed with ligature-aware fonts: -->
	arrow:
		name: "keyword.operator.timespan.srt"
		match: "-->"
		captures:
			0: name: "punctuation.definition.separator.srt"


	# <b>BOLD</b>
	bold:
		contentName: "markup.bold.srt"
		begin: "(<)([Bb])(?=$|>|\\s)([^>]*)(>)"
		end:   "(</)([Bb])[ \\t]*(>)|(?=^[ \\t]*$)"
		beginCaptures:
			0: name: "meta.tag.inline.b.html.srt"
			1: name: "punctuation.definition.tag.begin.html.srt"
			2: name: "entity.name.tag.inline.b.html.srt"
			3: patterns: [include: "text.html.basic#tag-stuff"]
			4: name: "punctuation.definition.tag.end.html.srt"
		endCaptures:
			0: name: "meta.tag.inline.b.html.srt"
			1: name: "punctuation.definition.tag.begin.html.srt"
			2: name: "entity.name.tag.inline.b.html"
			3: name: "punctuation.definition.tag.end.html.srt"
		patterns: [include: "#text"]


	# Quotation dash
	dash:
		name:  "markup.quote.quotation-dash.srt"
		match: "(?:^|\\G)(-)"
		captures:
			1: name: "punctuation.section.quote.srt"


	# Forced whitespace
	escapes:
		patterns: [{
			# Non-breaking space (which SubRip calls a “hard space”)
			name: "constant.character.whitespace.escape.hard-space.srt"
			match: "(\\\\)h"
			captures:
				1: name: "punctuation.definition.escape.backslash.srt"
		},{
			# Forced line-break
			name: "constant.character.whitespace.escape.forced-newline.srt"
			match: "(\\\\)N"
			captures:
				1: name: "punctuation.definition.escape.backslash.srt"
		}]


	# <font color="#BBAAFF">Coloured text</font>
	font:
		contentName: "markup.other.font.srt"
		begin: "(?i)(<)(font)(?=$|>|\\s)([^>]*)(>)"
		end:   "(?i)(</)(font)[ \\t]*(>)|(?=^[ \\t]*$)"
		beginCaptures:
			0: name: "meta.tag.inline.font.html.srt"
			1: name: "punctuation.definition.tag.begin.html.srt"
			2: name: "entity.name.tag.inline.font.html.srt"
			3: patterns: [include: "text.html.basic#tag-stuff"]
			4: name: "punctuation.definition.tag.end.html.srt"
		endCaptures:
			0: name: "meta.tag.inline.font.html.srt"
			1: name: "punctuation.definition.tag.begin.html.srt"
			2: name: "entity.name.tag.inline.font.html.srt"
			3: name: "punctuation.definition.tag.end.html.srt"
		patterns: [include: "#text"]


	# An HTML subset supported by most media players which support SRT subtitles
	formatting:
		patterns: [
			{include: "#bold"}
			{include: "#italic"}
			{include: "#underline"}
			{include: "#strike"}
			{include: "#font"}
			{include: "#align"}
			{include: "#unknownTag"}
		]


	# <i>ITALIC</i>
	italic:
		contentName: "markup.italic.srt"
		begin: "(<)([Ii])(?=$|>|\\s)([^>]*)(>)"
		end:   "(</)([Ii])[ \\t]*(>)|(?=^[ \\t]*$)"
		beginCaptures:
			0: name: "meta.tag.inline.i.html.srt"
			1: name: "punctuation.definition.tag.begin.html.srt"
			2: name: "entity.name.tag.inline.i.html.srt"
			3: patterns: [include: "text.html.basic#tag-stuff"]
			4: name: "punctuation.definition.tag.end.html.srt"
		endCaptures:
			0: name: "meta.tag.inline.i.html.srt"
			1: name: "punctuation.definition.tag.begin.html.srt"
			2: name: "entity.name.tag.inline.i.html"
			3: name: "punctuation.definition.tag.end.html.srt"
		patterns: [include: "#text"]


	# Optional text coordinates following timestamps (rarely supported)
	# - Source: http://forum.doom9.org/archive/index.php/t-86664.html
	linePosition:
		name:  "meta.line-position.${2:/downcase}-axis.srt"
		match: "\\b(([XY])[0-9]+)(:)(?:([-+]?[0-9]+\\.[0-9]+)|([-+]?[0-9]+))\\b"
		captures:
			1: name: "variable.parameter.position.srt"
			3: name: "keyword.operator.assignment.key-value.colon.srt"
			4: name: "constant.numeric.float.srt"
			5: name: "constant.numeric.integer.srt"


	# ♪ Lyrics to background music ♪
	lyrics:
		name:  "markup.quote.lyrics.srt"
		begin: "(♪+)[ \\t]*"
		end:   "[ \\t]*(♪+)|(?=^-|^[ \\t]*$|\\s*</)"
		beginCaptures: 1: name: "punctuation.definition.lyrics.begin.srt"
		endCaptures:   1: name: "punctuation.definition.lyrics.end.srt"
		patterns: [include: "#formatting"]


	# Speaker's name preceding caption (often "IN UPPERCASE:")
	speaker:
		match: """(?x)
			(?:^|\\G)
			(-[ \\t]*)?
			(
				(?: [^-<>\\s:]    [^<>:]* (?=:[ \\t]*\\S)
				|   [^-<>\\s:a-z] [^<>:a-z]*
				|   <(?!/(?i:[bisu]|font)>\\s*:)
				)++
				(?:
					(?=(?:\\s*</(?i:[bisu]|font)>)++\\s*:)
					|
					(:)
				)
			)(?=$|\\s|</)
		"""
		captures:
			1: patterns: [include: "#dash"]
			2: name: "entity.name.speaker.srt", patterns: [
				{include: "#formatting"}
				{include: "#action"}
			]
			3: name: "punctuation.separator.speaker.colon.srt"


	# Strikethrough text
	strike:
		contentName: "markup.strike.srt"
		begin: "(<)([Ss])(?=$|>|\\s)([^>]*)(>)"
		end:   "(</)([Ss])[ \\t]*(>)|(?=^[ \\t]*$)"
		beginCaptures:
			0: name: "meta.tag.inline.s.html.srt"
			1: name: "punctuation.definition.tag.begin.html.srt"
			2: name: "entity.name.tag.inline.s.html.srt"
			3: patterns: [include: "text.html.basic#tag-stuff"]
			4: name: "punctuation.definition.tag.end.html.srt"
		endCaptures:
			0: name: "meta.tag.inline.s.html.srt"
			1: name: "punctuation.definition.tag.begin.html.srt"
			2: name: "entity.name.tag.inline.s.html"
			3: name: "punctuation.definition.tag.end.html.srt"
		patterns: [include: "#text"]


	# Individual subtitles, beginning with an integer and terminated by an empty line
	subtitle:
		name:  "meta.subtitle.srt"
		begin: "^(?:\uFEFF?)(\\d+)$"
		end:   "^[ \\t]*$"
		beginCaptures:
			1: name: "entity.name.section.srt"
		patterns: [{
			# Second line of subtitle block
			begin: "\\G\\s*"
			end:   "(?!\\G)$"
			patterns: [{
				# Zero-length timecodes are sometimes used to encode comments and metadata
				name:  "meta.timespan.empty.srt"
				begin: """(?x) ^
					([0-9]{2}:[0-9]{2}:[0-9]{2}[,.][0-9]{3}) \\x20(-->)\\x20 (\\1)
					((?:\\s*[XY][0-9]+:[-+]?[0-9]+(?:\\.[0-9]+)?)++)?
					[ \\t]* $ """
				end: "(?=^[ \\t]*$)"
				beginCaptures:
					1: patterns: [include: "#timecode"], name: "constant.numeric.time.timecode.start.srt"
					3: patterns: [include: "#timecode"], name: "constant.numeric.time.timecode.end.srt"
					2: patterns: [include: "#arrow"]
					4: patterns: [include: "#linePosition"]
				contentName: "comment.block.ignored.hidden-subtitle.srt"
			},{
				# Timecodes of the form "00:12:43,471 --> 00:12:45,597"
				name:  "meta.timespan.srt"
				match: """(?x) ^
					([0-9]{2}:[0-9]{2}:[0-9]{2}[,.][0-9]{3}) \\x20(-->)\\x20
					([0-9]{2}:[0-9]{2}:[0-9]{2}[,.][0-9]{3})
					((?:\\s*[XY][0-9]+:[-+]?[0-9]+(?:\\.[0-9]+)?)++)?
					[ \\t]* $ """
				captures:
					1: patterns: [include: "#timecode"], name: "constant.numeric.time.timecode.start.srt"
					3: patterns: [include: "#timecode"], name: "constant.numeric.time.timecode.end.srt"
					2: patterns: [include: "#arrow"]
					4: patterns: [include: "#linePosition"]
			}, include: "#text"]
		}, include: "#text"]


	# Constituents of an individual subtitle (i.e., anything after the timecode line)
	text:
		patterns: [
			{include: "#speaker"}
			{include: "#dash"}
			{include: "#action"}
			{include: "#lyrics"}
			{include: "#formatting"}
			{include: "#escapes"}
		]


	# Questionable patterns matched inside a tokenised timecode
	timecode:
		patterns: [{
			# Some implementations (wrongly) accept dots instead of commas
			name: "invalid.illegal.syntax.decimal-separator.srt"
			match: "\\."
		},{
			# Highlight minute and second values outside the [00-59] range
			name: "invalid.illegal.value.out-of-range.vtt"
			match: "(?<=:)([6-9][0-9])"
		}]


	# Underlined text
	underline:
		contentName: "markup.underline.srt"
		begin: "(<)([Uu])(?=$|>|\\s)([^>]*)(>)"
		end:   "(</)([Uu])[ \\t]*(>)|(?=^[ \\t]*$)"
		beginCaptures:
			0: name: "meta.tag.inline.u.html.srt"
			1: name: "punctuation.definition.tag.begin.html.srt"
			2: name: "entity.name.tag.inline.u.html.srt"
			3: patterns: [include: "text.html.basic#tag-stuff"]
			4: name: "punctuation.definition.tag.end.html.srt"
		endCaptures:
			0: name: "meta.tag.inline.u.html.srt"
			1: name: "punctuation.definition.tag.begin.html.srt"
			2: name: "entity.name.tag.inline.u.html"
			3: name: "punctuation.definition.tag.end.html.srt"
		patterns: [include: "#text"]


	# Unrecognised SSA overrides: {\fad(10,10)}, {Y:text…}
	unknownTag:
		name: "meta.tag.override.unsupported.srt"
		match: "({)(?:.:[^}]*|\\\\[^}]*)(})"
		captures:
			0: name: "invalid.unimplemented.syntax.tag.srt"
			1: name: "punctuation.definition.tag.begin.srt"
			2: name: "punctuation.definition.tag.end.srt"
